// Warning!  This file was generated by running a program (see project |tools|).
// If you change it, the changes will be lost the next time the generator is
// run.  You should change the generator instead.

struct AddVesselToNextPhysicsBubble {
  struct In {
    Plugin* const plugin;
    char const* const vessel_guid;
    KSPPart const* const parts;
    int const count;
  };

  using Message = serialization::AddVesselToNextPhysicsBubble;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct AdvanceTime {
  struct In {
    Plugin* const plugin;
    double const t;
    double const planetarium_rotation;
  };

  using Message = serialization::AdvanceTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CelestialFromParent {
  struct In {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = QP;

  using Message = serialization::CelestialFromParent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CelestialInitialRotationInDegrees {
  struct In {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = double;

  using Message = serialization::CelestialInitialRotationInDegrees;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CelestialRotation {
  struct In {
    Plugin const* const plugin;
    int const index;
  };
  using Return = WXYZ;

  using Message = serialization::CelestialRotation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CelestialRotationPeriod {
  struct In {
    Plugin const* const plugin;
    int const celestial_index;
  };
  using Return = double;

  using Message = serialization::CelestialRotationPeriod;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CelestialSphereRotation {
  struct In {
    Plugin const* const plugin;
  };
  using Return = WXYZ;

  using Message = serialization::CelestialSphereRotation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct CurrentTime {
  struct In {
    Plugin const* const plugin;
  };
  using Return = double;

  using Message = serialization::CurrentTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct DeletePlugin {
  struct In {
    Plugin const** const plugin;
  };
  struct Out {
    Plugin const** const plugin;
  };

  using Message = serialization::DeletePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct DeleteString {
  struct In {
    char const** const native_string;
  };
  struct Out {
    char const** const native_string;
  };

  using Message = serialization::DeleteString;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct DeserializePlugin {
  struct In {
    char const* const serialization;
    int const serialization_size;
    PushDeserializer** const deserializer;
    Plugin const** const plugin;
  };
  struct Out {
    PushDeserializer** const deserializer;
    Plugin const** const plugin;
  };

  using Message = serialization::DeserializePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct EndInitialization {
  struct In {
    Plugin* const plugin;
  };

  using Message = serialization::EndInitialization;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanAppend {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    Burn const burn;
  };
  using Return = bool;

  using Message = serialization::FlightPlanAppend;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanCreate {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const final_time;
    double const mass_in_tonnes;
  };

  using Message = serialization::FlightPlanCreate;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanDelete {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };

  using Message = serialization::FlightPlanDelete;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanExists {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = bool;

  using Message = serialization::FlightPlanExists;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanGetAdaptiveStepParameters {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = AdaptiveStepParameters;

  using Message = serialization::FlightPlanGetAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanGetActualFinalTime {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetActualFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanGetDesiredFinalTime {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetDesiredFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanGetInitialTime {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = double;

  using Message = serialization::FlightPlanGetInitialTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanGetManoeuvre {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const index;
  };
  using Return = NavigationManoeuvre;

  using Message = serialization::FlightPlanGetManoeuvre;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanNumberOfManoeuvres {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanNumberOfManoeuvres;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanNumberOfSegments {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = int;

  using Message = serialization::FlightPlanNumberOfSegments;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanRemoveLast {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };

  using Message = serialization::FlightPlanRemoveLast;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanRenderedApsides {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const celestial_index;
    XYZ const sun_world_position;
  };
  struct Out {
    Iterator** const apoapsides;
    Iterator** const periapsides;
  };

  using Message = serialization::FlightPlanRenderedApsides;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanRenderedSegment {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
    int const index;
  };
  using Return = Iterator*;

  using Message = serialization::FlightPlanRenderedSegment;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanReplaceLast {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    Burn const burn;
  };
  using Return = bool;

  using Message = serialization::FlightPlanReplaceLast;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanSetAdaptiveStepParameters {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    AdaptiveStepParameters const adaptive_step_parameters;
  };
  using Return = bool;

  using Message = serialization::FlightPlanSetAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct FlightPlanSetDesiredFinalTime {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    double const final_time;
  };
  using Return = bool;

  using Message = serialization::FlightPlanSetDesiredFinalTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct ForgetAllHistoriesBefore {
  struct In {
    Plugin* const plugin;
    double const t;
  };

  using Message = serialization::ForgetAllHistoriesBefore;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetBufferDuration {
  using Return = int;

  using Message = serialization::GetBufferDuration;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetBufferedLogging {
  using Return = int;

  using Message = serialization::GetBufferedLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetPlottingFrame {
  struct In {
    Plugin const* const plugin;
  };
  using Return = NavigationFrame const*;

  using Message = serialization::GetPlottingFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetStderrLogging {
  using Return = int;

  using Message = serialization::GetStderrLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetSuppressedLogging {
  using Return = int;

  using Message = serialization::GetSuppressedLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetVerboseLogging {
  using Return = int;

  using Message = serialization::GetVerboseLogging;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct GetVersion {
  struct Out {
    char const** const build_date;
    char const** const version;
  };

  using Message = serialization::GetVersion;
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct HasEncounteredApocalypse {
  struct In {
    Plugin* const plugin;
  };
  struct Out {
    char const** const details;
  };
  using Return = bool;

  using Message = serialization::HasEncounteredApocalypse;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct HasVessel {
  struct In {
    Plugin* const plugin;
    char const* const vessel_guid;
  };
  using Return = bool;

  using Message = serialization::HasVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct InsertCelestialAbsoluteCartesian {
  struct In {
    Plugin* const plugin;
    int const celestial_index;
    int const* const parent_index;
    BodyParameters const body_parameters;
    char const* const x;
    char const* const y;
    char const* const z;
    char const* const vx;
    char const* const vy;
    char const* const vz;
  };

  using Message = serialization::InsertCelestialAbsoluteCartesian;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct InsertCelestialJacobiKeplerian {
  struct In {
    Plugin* const plugin;
    int const celestial_index;
    int const* const parent_index;
    BodyParameters const body_parameters;
    KeplerianElements const* const keplerian_elements;
  };

  using Message = serialization::InsertCelestialJacobiKeplerian;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct InsertOrKeepVessel {
  struct In {
    Plugin* const plugin;
    char const* const vessel_guid;
    int const parent_index;
  };
  using Return = bool;

  using Message = serialization::InsertOrKeepVessel;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IsKspStockSystem {
  struct In {
    Plugin* const plugin;
  };
  using Return = bool;

  using Message = serialization::IsKspStockSystem;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorAtEnd {
  struct In {
    Iterator const* const iterator;
  };
  using Return = bool;

  using Message = serialization::IteratorAtEnd;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorDelete {
  struct In {
    Iterator** const iterator;
  };
  struct Out {
    Iterator** const iterator;
  };

  using Message = serialization::IteratorDelete;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorGetQP {
  struct In {
    Iterator const* const iterator;
  };
  using Return = QP;

  using Message = serialization::IteratorGetQP;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorGetTime {
  struct In {
    Iterator const* const iterator;
  };
  using Return = double;

  using Message = serialization::IteratorGetTime;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorGetXYZ {
  struct In {
    Iterator const* const iterator;
  };
  using Return = XYZ;

  using Message = serialization::IteratorGetXYZ;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorIncrement {
  struct In {
    Iterator* const iterator;
  };

  using Message = serialization::IteratorIncrement;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct IteratorSize {
  struct In {
    Iterator const* const iterator;
  };
  using Return = int;

  using Message = serialization::IteratorSize;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct LogError {
  struct In {
    char const* const text;
  };

  using Message = serialization::LogError;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct LogFatal {
  struct In {
    char const* const text;
  };

  using Message = serialization::LogFatal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct LogInfo {
  struct In {
    char const* const text;
  };

  using Message = serialization::LogInfo;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct LogWarning {
  struct In {
    char const* const text;
  };

  using Message = serialization::LogWarning;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct NavballOrientation {
  struct In {
    Plugin const* const plugin;
    XYZ const sun_world_position;
    XYZ const ship_world_position;
  };
  using Return = WXYZ;

  using Message = serialization::NavballOrientation;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct NewNavigationFrame {
  struct In {
    Plugin const* const plugin;
    NavigationFrameParameters const parameters;
  };
  using Return = NavigationFrame*;

  using Message = serialization::NewNavigationFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct NewPlugin {
  struct In {
    char const* const game_epoch;
    char const* const solar_system_epoch;
    double const planetarium_rotation_in_degrees;
  };
  using Return = Plugin*;

  using Message = serialization::NewPlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct PhysicsBubbleIsEmpty {
  struct In {
    Plugin const* const plugin;
  };
  using Return = bool;

  using Message = serialization::PhysicsBubbleIsEmpty;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct PhysicsBubbleDisplacementCorrection {
  struct In {
    Plugin const* const plugin;
    XYZ const sun_position;
  };
  using Return = XYZ;

  using Message = serialization::PhysicsBubbleDisplacementCorrection;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct PhysicsBubbleVelocityCorrection {
  struct In {
    Plugin const* const plugin;
    int const reference_body_index;
  };
  using Return = XYZ;

  using Message = serialization::PhysicsBubbleVelocityCorrection;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct RenderedPrediction {
  struct In {
    Plugin* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
  };
  using Return = Iterator*;

  using Message = serialization::RenderedPrediction;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct RenderedPredictionApsides {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    int const celestial_index;
    XYZ const sun_world_position;
  };
  struct Out {
    Iterator** const apoapsides;
    Iterator** const periapsides;
  };

  using Message = serialization::RenderedPredictionApsides;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct RenderedVesselTrajectory {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    XYZ const sun_world_position;
  };
  using Return = Iterator*;

  using Message = serialization::RenderedVesselTrajectory;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SayHello {
  using Return = char const*;

  using Message = serialization::SayHello;
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SerializePlugin {
  struct In {
    Plugin const* const plugin;
    PullSerializer** const serializer;
  };
  struct Out {
    PullSerializer** const serializer;
  };
  using Return = char const*;

  using Message = serialization::SerializePlugin;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetBufferDuration {
  struct In {
    int const seconds;
  };

  using Message = serialization::SetBufferDuration;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetBufferedLogging {
  struct In {
    int const max_severity;
  };

  using Message = serialization::SetBufferedLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetMainBody {
  struct In {
    Plugin* const plugin;
    int const index;
  };

  using Message = serialization::SetMainBody;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetPlottingFrame {
  struct In {
    Plugin* const plugin;
    NavigationFrame** const navigation_frame;
  };
  struct Out {
    NavigationFrame** const navigation_frame;
  };

  using Message = serialization::SetPlottingFrame;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Out const& out, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetPredictionLength {
  struct In {
    Plugin* const plugin;
    double const t;
  };

  using Message = serialization::SetPredictionLength;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetStderrLogging {
  struct In {
    int const min_severity;
  };

  using Message = serialization::SetStderrLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetSuppressedLogging {
  struct In {
    int const min_severity;
  };

  using Message = serialization::SetSuppressedLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetVerboseLogging {
  struct In {
    int const level;
  };

  using Message = serialization::SetVerboseLogging;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct SetVesselStateOffset {
  struct In {
    Plugin* const plugin;
    char const* const vessel_guid;
    QP const from_parent;
  };

  using Message = serialization::SetVesselStateOffset;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct UpdateCelestialHierarchy {
  struct In {
    Plugin const* const plugin;
    int const celestial_index;
    int const parent_index;
  };

  using Message = serialization::UpdateCelestialHierarchy;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct UpdatePrediction {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };

  using Message = serialization::UpdatePrediction;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselBinormal {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselBinormal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselFromParent {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = QP;

  using Message = serialization::VesselFromParent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselGetPredictionAdaptiveStepParameters {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = AdaptiveStepParameters;

  using Message = serialization::VesselGetPredictionAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselNormal {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselNormal;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselSetPredictionAdaptiveStepParameters {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
    AdaptiveStepParameters const adaptive_step_parameters;
  };

  using Message = serialization::VesselSetPredictionAdaptiveStepParameters;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselTangent {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselTangent;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};

struct VesselVelocity {
  struct In {
    Plugin const* const plugin;
    char const* const vessel_guid;
  };
  using Return = XYZ;

  using Message = serialization::VesselVelocity;
  static void Fill(In const& in, not_null<Message*> const message);
  static void Fill(Return const& result, not_null<Message*> const message);
  static void Run(Message const& message,
                  not_null<Player::PointerMap*> const pointer_map);
};


// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry/geometry.proto

#ifndef PROTOBUF_geometry_2fgeometry_2eproto__INCLUDED
#define PROTOBUF_geometry_2fgeometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "quantities/quantities.pb.h"
// @@protoc_insertion_point(includes)

namespace principia {
namespace serialization {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_geometry_2fgeometry_2eproto();
void protobuf_AssignDesc_geometry_2fgeometry_2eproto();
void protobuf_ShutdownFile_geometry_2fgeometry_2eproto();

class R3Element;

// ===================================================================

class R3Element : public ::google::protobuf::Message {
 public:
  R3Element();
  virtual ~R3Element();

  R3Element(const R3Element& from);

  inline R3Element& operator=(const R3Element& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const R3Element& default_instance();

  void Swap(R3Element* other);

  // implements Message ----------------------------------------------

  inline R3Element* New() const { return New(NULL); }

  R3Element* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const R3Element& from);
  void MergeFrom(const R3Element& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(R3Element* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .principia.serialization.Quantity x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline const ::principia::serialization::Quantity& x() const;
  inline ::principia::serialization::Quantity* mutable_x();
  inline ::principia::serialization::Quantity* release_x();
  inline void set_allocated_x(::principia::serialization::Quantity* x);

  // required .principia.serialization.Quantity y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline const ::principia::serialization::Quantity& y() const;
  inline ::principia::serialization::Quantity* mutable_y();
  inline ::principia::serialization::Quantity* release_y();
  inline void set_allocated_y(::principia::serialization::Quantity* y);

  // required .principia.serialization.Quantity z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline const ::principia::serialization::Quantity& z() const;
  inline ::principia::serialization::Quantity* mutable_z();
  inline ::principia::serialization::Quantity* release_z();
  inline void set_allocated_z(::principia::serialization::Quantity* z);

  // @@protoc_insertion_point(class_scope:principia.serialization.R3Element)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::principia::serialization::Quantity* x_;
  ::principia::serialization::Quantity* y_;
  ::principia::serialization::Quantity* z_;
  friend void  protobuf_AddDesc_geometry_2fgeometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2fgeometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2fgeometry_2eproto();

  void InitAsDefaultInstance();
  static R3Element* default_instance_;
};
// ===================================================================


// ===================================================================

// R3Element

// required .principia.serialization.Quantity x = 1;
inline bool R3Element::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void R3Element::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void R3Element::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void R3Element::clear_x() {
  if (x_ != NULL) x_->::principia::serialization::Quantity::Clear();
  clear_has_x();
}
inline const ::principia::serialization::Quantity& R3Element::x() const {
  // @@protoc_insertion_point(field_get:principia.serialization.R3Element.x)
  return x_ != NULL ? *x_ : *default_instance_->x_;
}
inline ::principia::serialization::Quantity* R3Element::mutable_x() {
  set_has_x();
  if (x_ == NULL) {
    x_ = new ::principia::serialization::Quantity;
  }
  // @@protoc_insertion_point(field_mutable:principia.serialization.R3Element.x)
  return x_;
}
inline ::principia::serialization::Quantity* R3Element::release_x() {
  clear_has_x();
  ::principia::serialization::Quantity* temp = x_;
  x_ = NULL;
  return temp;
}
inline void R3Element::set_allocated_x(::principia::serialization::Quantity* x) {
  delete x_;
  x_ = x;
  if (x) {
    set_has_x();
  } else {
    clear_has_x();
  }
  // @@protoc_insertion_point(field_set_allocated:principia.serialization.R3Element.x)
}

// required .principia.serialization.Quantity y = 2;
inline bool R3Element::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void R3Element::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void R3Element::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void R3Element::clear_y() {
  if (y_ != NULL) y_->::principia::serialization::Quantity::Clear();
  clear_has_y();
}
inline const ::principia::serialization::Quantity& R3Element::y() const {
  // @@protoc_insertion_point(field_get:principia.serialization.R3Element.y)
  return y_ != NULL ? *y_ : *default_instance_->y_;
}
inline ::principia::serialization::Quantity* R3Element::mutable_y() {
  set_has_y();
  if (y_ == NULL) {
    y_ = new ::principia::serialization::Quantity;
  }
  // @@protoc_insertion_point(field_mutable:principia.serialization.R3Element.y)
  return y_;
}
inline ::principia::serialization::Quantity* R3Element::release_y() {
  clear_has_y();
  ::principia::serialization::Quantity* temp = y_;
  y_ = NULL;
  return temp;
}
inline void R3Element::set_allocated_y(::principia::serialization::Quantity* y) {
  delete y_;
  y_ = y;
  if (y) {
    set_has_y();
  } else {
    clear_has_y();
  }
  // @@protoc_insertion_point(field_set_allocated:principia.serialization.R3Element.y)
}

// required .principia.serialization.Quantity z = 3;
inline bool R3Element::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void R3Element::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void R3Element::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void R3Element::clear_z() {
  if (z_ != NULL) z_->::principia::serialization::Quantity::Clear();
  clear_has_z();
}
inline const ::principia::serialization::Quantity& R3Element::z() const {
  // @@protoc_insertion_point(field_get:principia.serialization.R3Element.z)
  return z_ != NULL ? *z_ : *default_instance_->z_;
}
inline ::principia::serialization::Quantity* R3Element::mutable_z() {
  set_has_z();
  if (z_ == NULL) {
    z_ = new ::principia::serialization::Quantity;
  }
  // @@protoc_insertion_point(field_mutable:principia.serialization.R3Element.z)
  return z_;
}
inline ::principia::serialization::Quantity* R3Element::release_z() {
  clear_has_z();
  ::principia::serialization::Quantity* temp = z_;
  z_ = NULL;
  return temp;
}
inline void R3Element::set_allocated_z(::principia::serialization::Quantity* z) {
  delete z_;
  z_ = z;
  if (z) {
    set_has_z();
  } else {
    clear_has_z();
  }
  // @@protoc_insertion_point(field_set_allocated:principia.serialization.R3Element.z)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace serialization
}  // namespace principia

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometry_2fgeometry_2eproto__INCLUDED

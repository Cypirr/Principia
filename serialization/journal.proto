syntax = "proto2";

import "google/protobuf/descriptor.proto";

package principia.journal.serialization;

// These two messages must come first because the other interchange messages use
// them and we need to generate the structs in the correct order.
message NavigationFrameParameters {
  required int32 extension = 1;  // 6000 to 6999, see DynamicFrame.
  required int32 centre_index = 2;
  required int32 primary_index = 3;
  required int32 secondary_index = 4;
}

message XYZ {
  required double x = 1;
  required double y = 2;
  required double z = 3;
}

message AdaptiveStepParameters {
  required int64 max_steps = 1;
  required double length_integration_tolerance = 2;
  required double speed_integration_tolerance = 3;
}

message BodyParameters {
  required string name = 10;
  required string gravitational_parameter = 1;
  required double reference_instant = 7 [default = nan];  // Optional.
  optional string mean_radius = 2;
  optional string axis_right_ascension = 3;
  optional string axis_declination = 4;
  optional string reference_angle = 8;
  optional string angular_frequency = 9;
  optional string j2 = 5;
  optional string reference_radius = 6;
}

message Burn {
  required double thrust_in_kilonewtons = 1;
  required double specific_impulse_in_seconds_g0 = 2;
  required NavigationFrameParameters frame = 3;
  required double initial_time = 4;
  required XYZ delta_v = 5;
}

message KeplerianElements {
  required double eccentricity = 1;
  required double semimajor_axis = 2 [default = nan];  // Optional.
  required double mean_motion = 3 [default = nan];     // Optional.
  required double inclination_in_degrees = 4;
  required double longitude_of_ascending_node_in_degrees = 5;
  required double argument_of_periapsis_in_degrees = 6;
  required double mean_anomaly = 7;
}

message NavigationManoeuvre {
  required Burn burn = 1;
  required double initial_mass_in_tonnes = 2;
  required double final_mass_in_tonnes = 3;
  required double mass_flow = 4;
  required double duration = 5;
  required double final_time = 6;
  required double time_of_half_delta_v = 7;
  required double time_to_half_delta_v = 8;
  required XYZ inertial_direction = 9;
  // Frenet trihedron at the beginning of the manœuvre.
  required XYZ binormal = 10;
  required XYZ normal = 11;
  required XYZ tangent = 12;
}

message QP {
  required XYZ q = 1;
  required XYZ p = 2;
}

message WXYZ {
  required double w = 1;
  required double x = 2;
  required double y = 3;
  required double z = 4;
}

message Method {
  extensions 5000 to 5999;  // Last used: 5120.
}

message AdvanceTime {
  extend Method {
    optional AdvanceTime extension = 5019;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
    required double planetarium_rotation = 3;
  }
  optional In in = 1;
}

message AdvanceParts {
  extend Method {
    optional AdvanceParts extension = 5120;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
  }
  optional In in = 1;
}

message PrepareToReportCollisions {
  extend Method {
    optional PrepareToReportCollisions extension = 5118;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  optional In in = 1;
}

message CelestialFromParent {
  extend Method {
    optional CelestialFromParent extension = 5026;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
  }
  message Return {
    required QP result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CelestialInitialRotationInDegrees {
  extend Method {
    optional CelestialInitialRotationInDegrees extension = 5100;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CelestialRotation {
  extend Method {
    optional CelestialRotation extension = 5098;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 index = 2;
  }
  message Return {
    required WXYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CelestialRotationPeriod {
  extend Method {
    optional CelestialRotationPeriod extension = 5099;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CelestialSphereRotation {
  extend Method {
    optional CelestialSphereRotation extension = 5101;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
  }
  message Return {
    required WXYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CelestialWorldDegreesOfFreedom {
  extend Method {
    optional CelestialWorldDegreesOfFreedom extension = 5112;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 index = 2;
    required fixed32 part_at_origin = 3;
  }
  message Return {
    required QP result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message CurrentTime {
  extend Method {
    optional CurrentTime extension = 5048;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message DeletePlugin {
  extend Method {
    optional DeletePlugin extension = 5000;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_consumed) = true];
  }
  message Out {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const"];
  }
  optional In in = 1;
  optional Out out = 2;
}

message DeleteString {
  extend Method {
    optional DeleteString extension = 5049;
  }
  message In {
    required fixed64 native_string = 1 [(pointer_to) = "char const",
                                        (is_consumed) = true];
  }
  message Out {
    required fixed64 native_string = 1 [(pointer_to) = "char const"];
  }
  optional In in = 1;
  optional Out out = 2;
}

message DeserializePlugin {
  extend Method {
    optional DeserializePlugin extension = 5050;
  }
  message In {
    required string serialization = 1 [(size) = "serialization_size"];
    required fixed64 deserializer = 2
        [(pointer_to) = "PushDeserializer",
         (is_consumed_if) = "serialization->empty()"];
    required fixed64 plugin = 3 [(pointer_to) = "Plugin const"];
  }
  message Out {
    required fixed64 deserializer = 1
        [(pointer_to) = "PushDeserializer",
         (is_produced_if) = "!serialization->empty()"];
    required fixed64 plugin = 2 [(pointer_to) = "Plugin const",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Out out = 2;
}

message EndInitialization {
  extend Method {
    optional EndInitialization extension = 5020;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  optional In in = 1;
}

message FlightPlanAppend {
  extend Method {
    optional FlightPlanAppend extension = 5063;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required Burn burn = 3;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanCreate {
  extend Method {
    optional FlightPlanCreate extension = 5071;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required double final_time = 3;
    required double mass_in_tonnes = 4;
  }
  optional In in = 1;
}

message FlightPlanDelete {
  extend Method {
    optional FlightPlanDelete extension = 5072;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  optional In in = 1;
}

message FlightPlanExists {
  extend Method {
    optional FlightPlanExists extension = 5074;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanGetAdaptiveStepParameters {
  extend Method {
    optional FlightPlanGetAdaptiveStepParameters extension = 5079;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required AdaptiveStepParameters result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanGetActualFinalTime {
  extend Method {
    optional FlightPlanGetActualFinalTime extension = 5088;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanGetDesiredFinalTime {
  extend Method {
    optional FlightPlanGetDesiredFinalTime extension = 5076;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanGetInitialTime {
  extend Method {
    optional FlightPlanGetInitialTime extension = 5075;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanGetManoeuvre {
  extend Method {
    optional FlightPlanGetManoeuvre extension = 5064;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required int32 index = 3;
  }
  message Return {
    required NavigationManoeuvre result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanNumberOfManoeuvres {
  extend Method {
    optional FlightPlanNumberOfManoeuvres extension = 5038;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required int32 result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanNumberOfSegments {
  extend Method {
    optional FlightPlanNumberOfSegments extension = 5070;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required int32 result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanRemoveLast {
  extend Method {
    optional FlightPlanRemoveLast extension = 5065;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  optional In in = 1;
}

message FlightPlanRenderedApsides {
  extend Method {
    optional FlightPlanRenderedApsides extension = 5081;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required int32 celestial_index = 3;
    required XYZ sun_world_position = 4;
  }
  message Out {
    required fixed64 apoapsides = 1 [(pointer_to) = "Iterator",
                                     (is_produced) = true];
    required fixed64 periapsides = 2 [(pointer_to) = "Iterator",
                                      (is_produced) = true];
  }
  optional In in = 1;
  optional Out out = 2;
}

message FlightPlanRenderedSegment {
  extend Method {
    optional FlightPlanRenderedSegment extension = 5069;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 3;
    required int32 index = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "Iterator",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanReplaceLast{
  extend Method {
    optional FlightPlanReplaceLast extension = 5066;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required Burn burn = 3;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanSetAdaptiveStepParameters {
  extend Method {
    optional FlightPlanSetAdaptiveStepParameters extension = 5080;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required AdaptiveStepParameters adaptive_step_parameters = 3;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message FlightPlanSetDesiredFinalTime {
  extend Method {
    optional FlightPlanSetDesiredFinalTime extension = 5067;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required double final_time = 3;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message ForgetAllHistoriesBefore {
  extend Method {
    optional ForgetAllHistoriesBefore extension = 5021;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
  }
  optional In in = 1;
}

message FreeVesselsAndPartsAndCollectPileUps {
  extend Method {
    optional FreeVesselsAndPartsAndCollectPileUps extension = 5111;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  optional In in = 1;
}

message GetBufferDuration {
  extend Method {
    optional GetBufferDuration extension = 5005;
  }
  message Return {
    required int32 result = 1;
  }
  optional Return return = 3;
}

message GetBufferedLogging {
  extend Method {
    optional GetBufferedLogging extension = 5006;
  }
  message Return {
    required int32 result = 1;
  }
  optional Return return = 3;
}

message GetPartActualDegreesOfFreedom {
  extend Method {
    optional GetPartActualDegreesOfFreedom extension = 5116;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required fixed32 part_id = 2;
    required fixed32 part_at_origin = 3;
  }
  message Return {
    required QP result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message GetPlottingFrame {
  extend Method {
    optional GetPlottingFrame extension = 5061;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const"];
  }
  message Return {
    // This doesn't transfer ownership to the caller, but we must enter the
    // pointer in the pointer_map in case it crosses the interface again.
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame const",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message GetStderrLogging {
  extend Method {
    optional GetStderrLogging extension = 5007;
  }
  message Return {
    required int32 result = 1;
  }
  optional Return return = 3;
}

message GetSuppressedLogging {
  extend Method {
    optional GetSuppressedLogging extension = 5008;
  }
  message Return {
    required int32 result = 1;
  }
  optional Return return = 3;
}

message GetVerboseLogging {
  extend Method {
    optional GetVerboseLogging extension = 5009;
  }
  message Return {
    required int32 result = 1;
  }
  optional Return return = 3;
}

message GetVersion {
  extend Method {
    optional GetVersion extension = 5078;
  }
  message Out {
    required string build_date = 1;
    required string version = 2;
  }
  optional Out out = 2;
}

message HasEncounteredApocalypse {
  extend Method {
    optional HasEncounteredApocalypse extension = 5102;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  message Out {
    required fixed64 details = 1 [(pointer_to) = "char const",
                                  (is_produced) = true];
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Out out = 2;
  optional Return return = 3;
}

message HasVessel {
  extend Method {
    optional HasVessel extension = 5039;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IncrementPartIntrinsicForce {
  extend Method {
    optional IncrementPartIntrinsicForce extension = 5114;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed32 part_id = 2;
    required XYZ force_in_kilonewtons = 3;
  }
  optional In in = 1;
}

message InsertCelestialAbsoluteCartesian {
  extend Method {
    optional InsertCelestialAbsoluteCartesian extension = 5003;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 celestial_index = 2;
    optional int32 parent_index = 3;
    required BodyParameters body_parameters = 16;
    required string x = 9;
    required string y = 10;
    required string z = 11;
    required string vx = 12;
    required string vy = 13;
    required string vz = 14;
  }
  optional In in = 1;
}

message InsertCelestialJacobiKeplerian {
  extend Method {
    optional InsertCelestialJacobiKeplerian extension = 5092;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 celestial_index = 2;
    optional int32 parent_index = 3;
    required BodyParameters body_parameters = 16;
    optional KeplerianElements keplerian_elements = 9;
  }
  optional In in = 1;
}

message InsertOrKeepVessel {
  extend Method {
    optional InsertOrKeepVessel extension = 5022;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    required string vessel_name = 5;
    required int32 parent_index = 3;
    required bool loaded = 4;
  }
  message Out {
    required bool inserted = 1;
  }
  optional In in = 1;
  optional Out out = 2;
}

message InsertOrKeepLoadedPart {
  extend Method {
    optional InsertOrKeepLoadedPart extension = 5113;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed32 part_id = 2;
    required string name = 8;
    required double mass_in_tonnes = 3;
    required string vessel_guid = 4;
    required int32 main_body_index = 5;
    required QP main_body_world_degrees_of_freedom = 6;
    required QP part_world_degrees_of_freedom = 7;
  }
  optional In in = 1;
}

message InsertUnloadedPart {
  extend Method {
    optional InsertUnloadedPart extension = 5117;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed32 part_id = 2;
    required string name = 5;
    required string vessel_guid = 3;
    required QP from_parent = 4;
  }
  optional In in = 1;
}

message IsKspStockSystem {
  extend Method {
    optional IsKspStockSystem extension = 5096;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IteratorAtEnd {
  extend Method {
    optional IteratorAtEnd extension = 5083;
  }
  message In {
    required fixed64 iterator = 1
        [(pointer_to) = "Iterator const", (is_subject) = true];
  }
  message Return {
    required bool result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IteratorDelete {
  extend Method {
    optional IteratorDelete extension = 5084;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator",
                                   (is_consumed) = true];
  }
  message Out {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator"];
  }
  optional In in = 1;
  optional Out out = 2;
}

message IteratorGetQP {
  extend Method {
    optional IteratorGetQP extension = 5093;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator const",
                                   (is_subject) = true];
  }
  message Return {
    required QP result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IteratorGetTime {
  extend Method {
    optional IteratorGetTime extension = 5094;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator const",
                                   (is_subject) = true];
  }
  message Return {
    required double result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IteratorGetXYZ {
  extend Method {
    optional IteratorGetXYZ extension = 5085;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator const",
                                   (is_subject) = true];
  }
  message Return {
    required XYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message IteratorIncrement {
  extend Method {
    optional IteratorIncrement extension = 5086;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator",
                                   (is_subject) = true];
  }
  optional In in = 1;
}

message IteratorSize {
  extend Method {
    optional IteratorSize extension = 5087;
  }
  message In {
    required fixed64 iterator = 1 [(pointer_to) = "Iterator const",
                                   (is_subject) = true];
  }
  message Return {
    required int32 result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message LogError {
  extend Method {
    optional LogError extension = 5010;
  }
  message In {
    required string text = 1;
  }
  optional In in = 1;
}

message LogFatal {
  extend Method {
    optional LogFatal extension = 5011;
  }
  message In {
    required string text = 1;
  }
  optional In in = 1;
}

message LogInfo {
  extend Method {
    optional LogInfo extension = 5012;
  }
  message In {
    required string text = 1;
  }
  optional In in = 1;
}

message LogWarning {
  extend Method {
    optional LogWarning extension = 5013;
  }
  message In {
    required string text = 1;
  }
  optional In in = 1;
}

message NavballOrientation {
  extend Method {
    optional NavballOrientation extension = 5051;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required XYZ sun_world_position = 3;
    required XYZ ship_world_position = 4;
  }
  message Return {
    required WXYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message NewNavigationFrame {
  extend Method {
    optional NewNavigationFrame extension = 5062;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required NavigationFrameParameters parameters = 2;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "NavigationFrame",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message NewPlugin {
  extend Method {
    optional NewPlugin extension = 5001;
  }
  message In {
    required string game_epoch = 1;
    required string solar_system_epoch = 2;
    required double planetarium_rotation_in_degrees = 3;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "Plugin",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message RenderedPrediction {
  extend Method {
    optional RenderedPrediction extension = 5031;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "Iterator",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message RenderedPredictionApsides {
  extend Method {
    optional RenderedPredictionApsides extension = 5082;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required int32 celestial_index = 3;
    required XYZ sun_world_position = 4;
  }
  message Out {
    required fixed64 apoapsides = 1 [(pointer_to) = "Iterator",
                                     (is_produced) = true];
    required fixed64 periapsides = 2 [(pointer_to) = "Iterator",
                                      (is_produced) = true];
  }
  optional In in = 1;
  optional Out out = 2;
}

message RenderedVesselTrajectory {
  extend Method {
    optional RenderedVesselTrajectory extension = 5032;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required XYZ sun_world_position = 4;
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "Iterator",
                                 (is_produced) = true];
  }
  optional In in = 1;
  optional Return return = 3;
}

message ReportCollision {
  extend Method {
    optional ReportCollision extension = 5103;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required fixed32 part1_id = 2;
    required fixed32 part2_id = 3;
  }
  optional In in = 1;
}

message SayHello {
  extend Method {
    optional SayHello extension = 5053;
  }
  message Return {
    required string result = 1;
  }
  optional Return return = 3;
}

message SerializePlugin {
  extend Method {
    optional SerializePlugin extension = 5054;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required fixed64 serializer = 2
        [(pointer_to) = "PullSerializer",
         (is_consumed_if) = "result == nullptr"];
  }
  message Out {
    required fixed64 serializer = 1 [(pointer_to) = "PullSerializer",
                                     (is_produced_if) = "result != nullptr"];
  }
  message Return {
    required fixed64 result = 1 [(pointer_to) = "char const",
                                 (is_produced_if) = "result != nullptr"];
  }
  optional In in = 1;
  optional Out out = 2;
  optional Return return = 3;
}

message SetBufferDuration {
  extend Method {
    optional SetBufferDuration extension = 5014;
  }
  message In {
    required int32 seconds = 1;
  }
  optional In in = 1;
}

message SetBufferedLogging {
  extend Method {
    optional SetBufferedLogging extension = 5015;
  }
  message In {
    required int32 max_severity = 1;
  }
  optional In in = 1;
}

message SetMainBody {
  extend Method {
    optional SetMainBody extension = 5097;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required int32 index = 2;
  }
  optional In in = 1;
}

message SetPartApparentDegreesOfFreedom {
  extend Method {
    optional SetPartApparentDegreesOfFreedom extension = 5115;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed32 part_id = 2;
    required QP degrees_of_freedom = 3;
  }
  optional In in = 1;
}

message SetPlottingFrame {
  extend Method {
    optional SetPlottingFrame extension = 5059;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required fixed64 navigation_frame = 2 [(pointer_to) = "NavigationFrame",
                                           (is_consumed) = true];
  }
  message Out {
    required fixed64 navigation_frame = 1 [(pointer_to) = "NavigationFrame"];
  }
  optional In in = 1;
  optional Out out = 2;
}

message SetPredictionLength {
  extend Method {
    optional SetPredictionLength extension = 5042;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin", (is_subject) = true];
    required double t = 2;
  }
  optional In in = 1;
}

message SetStderrLogging {
  extend Method {
    optional SetStderrLogging extension = 5016;
  }
  message In {
    required int32 min_severity = 1;
  }
  optional In in = 1;
}

message SetSuppressedLogging {
  extend Method {
    optional SetSuppressedLogging extension = 5017;
  }
  message In {
    required int32 min_severity = 1;
  }
  optional In in = 1;
}

message SetVerboseLogging {
  extend Method {
    optional SetVerboseLogging extension = 5018;
  }
  message In {
    required int32 level = 1;
  }
  optional In in = 1;
}

message UpdateCelestialHierarchy {
  extend Method {
    optional UpdateCelestialHierarchy extension = 5025;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required int32 celestial_index = 2;
    required int32 parent_index = 3;
  }
  optional In in = 1;
}

message UpdatePrediction {
  extend Method {
    optional UpdatePrediction extension = 5033;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  optional In in = 1;
}

message VesselBinormal {
  extend Method {
    optional VesselBinormal extension = 5055;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message VesselFromParent {
  extend Method {
    optional VesselFromParent extension = 5034;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required QP result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message VesselGetPredictionAdaptiveStepParameters {
  extend Method {
    optional VesselGetPredictionAdaptiveStepParameters extension = 5090;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required AdaptiveStepParameters adaptive_step_parameters = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message VesselNormal {
  extend Method {
    optional VesselNormal extension = 5056;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message VesselSetPredictionAdaptiveStepParameters {
  extend Method {
    optional VesselSetPredictionAdaptiveStepParameters extension = 5091;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
    required AdaptiveStepParameters adaptive_step_parameters = 3;
  }
  optional In in = 1;
}

message VesselTangent {
  extend Method {
    optional VesselTangent extension = 5057;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

message VesselVelocity{
  extend Method {
    optional VesselVelocity extension = 5095;
  }
  message In {
    required fixed64 plugin = 1 [(pointer_to) = "Plugin const",
                                 (is_subject) = true];
    required string vessel_guid = 2;
  }
  message Return {
    required XYZ result = 1;
  }
  optional In in = 1;
  optional Return return = 3;
}

extend google.protobuf.FieldOptions {
  // For a fixed64 field (which is used to represent a pointer), gives the C++
  // designated type of the pointer.
  optional string pointer_to = 50000;

  // For a repeated message or string field that comes with a separate size
  // parameter, gives the name of the size parameter.
  optional string size = 50001;

  // For a fixed64 field, indicates whether the corresponding pointer is
  // consumed (deleted or has its ownership transferred) or produced (allocated)
  // by the interface.
  optional bool is_consumed = 50002;
  optional bool is_produced = 50003;

  // Same as above, but the consumption/production is conditional on some state
  // of the parameters.
  optional string is_consumed_if = 50004;
  optional string is_produced_if = 50005;

  // For a fixed64 field (which is used to represent a pointer), indicates that
  // it should be the subject in C# methods.
  optional bool is_subject = 50006;
}

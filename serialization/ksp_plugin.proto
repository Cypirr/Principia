syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/physics.proto";
import "serialization/quantities.proto";

package principia.serialization;

message HistoryAndProlongation {
  required Trajectory history = 1;
  required Trajectory.Iterator prolongation = 2;
}

message Vessel {
  required MasslessBody body = 1;
  oneof trajectory_bundle {
    HistoryAndProlongation history_and_prolongation = 2;
    Trajectory owned_prolongation = 3;
  }
}

message Celestial {
  required MassiveBody body = 1;
  required HistoryAndProlongation history_and_prolongation = 2;
}

message Part {
  required Pair degrees_of_freedom = 1;
  required Quantity mass = 2;
  required Multivector gravitational_acceleration_to_be_applied_by_ksp = 3;
}

message PhysicsBubble {
  message FullState {
    // The uint64 is the std::distance from Plugin::vessels_.begin();
    repeated int64 vessels = 1;
    map<uint32, Part> parts = 2;
    required Pair centre_of_mass = 3;
    required Trajectory centre_of_mass_trajectory = 4;
    // The uint64 is the std::distance from Plugin::vessels_.begin();
    map<uint64, Pair> from_centre_of_mass = 5;
    required Pair correction = 6;
  }
  required MasslessBody body = 1;
  optional FullState current = 2;
}

message Plugin {
  map<string, Vessel> vessels = 1;
  map<int32, Celestial> celestials = 2;
  // The uint64 is the std::distance from Plugin::vessels_.begin();
  repeated uint64 dirty_vessels = 3;
  required PhysicsBubble bubble = 4;
  required Quantity planetarium_rotation = 5;
  required Point current_time = 6;
  // The uint64 is the std::distance from Plugin::celestials_.begin();
  required uint64 sun = 7;
}

syntax = "proto2";

import "serialization/geometry.proto";
import "serialization/integrators.proto";
import "serialization/physics.proto";
import "serialization/quantities.proto";

package principia.serialization;

message Celestial {
  required MassiveBody body = 1;
  required HistoryAndProlongation history_and_prolongation = 2;
}

message CelestialJacobiKeplerian {
  required int32 celestial_index = 1;
  optional int32 parent_index = 2;
  optional KeplerianElements keplerian_elements = 3;
  required MassiveBody body = 4;
}

message FlightPlan {
  required Quantity initial_mass = 1;
  required Point initial_time = 2;
  optional Pair initial_degrees_of_freedom = 12;  // required.
  required Point desired_final_time = 3;
  repeated Manoeuvre manoeuvre = 8;
  optional Ephemeris.AdaptiveStepParameters
      adaptive_step_parameters = 11;  // required

  // Pre-Буняковский.
  optional Quantity length_integration_tolerance = 4;
  optional Quantity speed_integration_tolerance = 5;
  optional AdaptiveStepSizeIntegrator integrator = 6;
  repeated DiscreteTrajectory.Pointer segment = 7;
  reserved 9, 10;
  reserved "anomalous_segments", "max_steps";
}

// Pre-Буняковский.
message HistoryAndProlongation {
  required DiscreteTrajectory history = 1;
  required DiscreteTrajectory.Pointer prolongation = 2;
}

message Manoeuvre {
  required Quantity thrust = 1;
  required Quantity initial_mass = 2;
  required Quantity specific_impulse = 3;
  required Multivector direction = 4;
  required Quantity duration = 5;
  required Point initial_time = 6;
  required DynamicFrame frame = 7;
}

message Part {
  required fixed32 part_id = 4;
  required Quantity mass = 2;
  required Multivector intrinsic_force = 5;
  optional int32 containing_pile_up = 6;  // TODO(phl): Do the right thing.
  optional Pair degrees_of_freedom = 1;
  required DiscreteTrajectory tail = 7;
  required bool tail_is_authoritative = 8;

  // Pre-Cardano.
  reserved 3;
  reserved "gravitational_acceleration_to_be_applied_by_ksp";
}

message PileUp {
  repeated fixed32 part_id = 1;
  required Quantity mass = 2;
  required Multivector intrinsic_force = 3;
  required DiscreteTrajectory psychohistory = 4;
  map<uint32, Pair> actual_part_degrees_of_freedom = 5;
  map<uint32, Pair> apparent_part_degrees_of_freedom = 6;
}

message Plugin {
  message VesselAndProperties {
    required string guid = 1;
    required Vessel vessel = 2;
    required int32 parent_index = 3;
    required bool dirty = 4;
  }
  message CelestialAndProperties {
    required int32 index = 1;
    required Celestial celestial = 2;
    optional int32 parent_index = 3;
  }
  message CelestialParenthood {
    required int32 index = 1;
    optional int32 parent_index = 2;
  }
  repeated VesselAndProperties vessel = 1;
  repeated CelestialAndProperties pre_bourbaki_celestial = 2;
  repeated CelestialParenthood celestial = 10;
  optional Ephemeris ephemeris = 7;  // required
  required Quantity planetarium_rotation = 4;
  optional Point game_epoch = 15;  // required
  required Point current_time = 5;
  required int32 sun_index = 6;
  optional DynamicFrame plotting_frame = 11;  // required
  optional Ephemeris.FixedStepParameters history_parameters = 12;  // required
  optional Ephemeris.AdaptiveStepParameters
      prolongation_parameters = 13;  // required
  optional Ephemeris.AdaptiveStepParameters
      prediction_parameters = 14;  // required

  // Pre-Буняковский.
  reserved 8, 9;
  reserved "prolongation_integrator", "prediction_integrator";
  // Pre-Cardano.
  reserved 3;
  reserved "bubble";
}

message Vessel {
  required MasslessBody body = 1;
  optional FlightPlan flight_plan = 4;
  optional DiscreteTrajectory history = 6;  // required
  optional Ephemeris.AdaptiveStepParameters
      prolongation_adaptive_step_parameters = 7;  // required
  optional Ephemeris.FixedStepParameters
      history_fixed_step_parameters = 8;  // required
  optional Point prediction_fork_time = 12;  // required
  optional Point prediction_last_time = 9;  // required
  optional Ephemeris.AdaptiveStepParameters
      prediction_adaptive_step_parameters = 10;  // required
  optional bool is_dirty = 11 [default = false];  // required

  // Pre-Буняковский.
  optional DiscreteTrajectory.Pointer prediction = 5;
  oneof trajectory_bundle {
    HistoryAndProlongation history_and_prolongation = 2;
    DiscreteTrajectory owned_prolongation = 3;
  }
}
